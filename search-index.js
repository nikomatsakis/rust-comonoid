var searchIndex = {};
searchIndex['comonoid'] = {"items":[[0,"","comonoid","",null,null],[3,"Comonoidal","","A newtype wrapper to make a comonoid out of any\ncloneable type.",null,null],[5,"discard","","Takes ownership of a value and returns `()`,\nrendering it unusable.",null,null],[5,"duplicate","","Takes ownership of a value and returns a tuple of\nclones.",null,null],[8,"Comonoid","","A comonoid in a monoidal category is a monoid\nin the dual category, what is the problem?",null,null],[10,"counit","","The dual to the monoidal unit.",0,null],[10,"comult","","The dual to the monoidal multiplication.",0,null],[11,"from","","",1,{"inputs":[{"name":"comonoidal"},{"name":"t"}],"output":{"name":"comonoidal"}}],[11,"as_ref","","",1,{"inputs":[{"name":"comonoidal"}],"output":{"name":"t"}}],[11,"as_mut","","",1,{"inputs":[{"name":"comonoidal"}],"output":{"name":"t"}}],[11,"clone","","",1,{"inputs":[{"name":"comonoidal"}],"output":{"name":"self"}}],[11,"counit","","",1,null],[11,"comult","","",1,null]],"paths":[[8,"Comonoid"],[3,"Comonoidal"]]};
initSearch(searchIndex);
